<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>食用说明</title>
    <link href="/2050/10/17/%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2050/10/17/%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="本站食用说明">本站食用说明</h1><h2 id="这是大蒟蒻coolball的个人博客">这是大蒟蒻CoolBall的个人博客</h2><ol type="1"><li>这里会发一些学习笔记（比如算法、数据结构、数分）</li><li>还会有一些日常（比如本篇）</li><li>本站才刚创建，功能会慢慢补充上去，“慢慢”（数科院实在是太忙了）</li><li>欢迎各位dalao，julao，奆佬和神斧正（评论功能之后开呜呜）</li><li>禁止讨论敏感话题（dddd）</li></ol><h2 id="更新说明">更新说明</h2><p>不定期更新，看心情（主要是太菜了）</p><h2 id="希望写博客可以让我学到更多和认识更多神仙">希望写博客可以让我学到更多和认识更多神仙！</h2><h2 id="感谢enderturtle龟龟神仙让我有了建博客的想法并且给我提供帮助">感谢Enderturtle龟龟神仙让我有了建博客的想法并且给我提供帮助！</h2><p>无了，有啥之后再补充吧（</p>]]></content>
    
    
    <categories>
      
      <category>进站必读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DeterminantCalculator</title>
    <link href="/2021/11/05/DeterminantCalculator/"/>
    <url>/2021/11/05/DeterminantCalculator/</url>
    
    <content type="html"><![CDATA[<p>行列式太难算了</p><p>网上计算器也没过程</p><p>整了一个</p><p>非常丑</p><p>但无所谓了（</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxm 6005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> inf 2147483647</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxw 13000</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, a, b) for(int i = a; i &lt;= b; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> loop(i, a, b) for(int i = a; i &gt;= b; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sqr(x) ((x) * (x))</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    ll s = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(ch == <span class="hljs-string">&#x27;-&#x27;</span>) w = <span class="hljs-number">-1</span>; ch = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">while</span>(ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;s = s * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>; ch = <span class="hljs-built_in">getchar</span>();&#125;<br>    <span class="hljs-keyword">return</span> s * w;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ============================================================================</span><br><span class="hljs-comment">@Author:      Cool_Ball</span><br><span class="hljs-comment">@DateTime:    2021-11-04 21:03:38</span><br><span class="hljs-comment">* ============================================================================</span><br><span class="hljs-comment">*/</span><br><br>ll n;<br><br><span class="hljs-comment">//----------fraction start----------//</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">frac</span> &#123;</span><br>    ll up, down;<br>&#125;;<br><br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><br><span class="hljs-function">frac <span class="hljs-title">add</span><span class="hljs-params">(frac a, frac b)</span> </span>&#123;<br>    ll tmp1 = a.down * b.down, tmp2 = a.up * b.down + b.up * a.down;<br>    ll g = <span class="hljs-built_in">gcd</span>(tmp1, tmp2);<br>    tmp1 /= g, tmp2 /= g;<br>    <span class="hljs-keyword">return</span> frac&#123;tmp2, tmp1&#125;;<br>&#125;<br><br><span class="hljs-function">frac <span class="hljs-title">subt</span><span class="hljs-params">(frac a, frac b)</span> </span>&#123;<br>    ll tmp1 = a.down * b.down, tmp2 = a.up * b.down - b.up * a.down;<br>    ll g = <span class="hljs-built_in">gcd</span>(tmp1, tmp2);<br>    tmp1 /= g, tmp2 /= g;<br>    <span class="hljs-keyword">if</span>(tmp1 &lt; <span class="hljs-number">0</span>) &#123;<br>        tmp1 = <span class="hljs-built_in">abs</span>(tmp1);<br>        tmp2 = -tmp2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> frac&#123;tmp2, tmp1&#125;;<br>&#125;<br><br><span class="hljs-function">frac <span class="hljs-title">mul</span><span class="hljs-params">(frac a, frac b)</span> </span>&#123;<br>    ll tmp1 = a.down * b.down, tmp2 = a.up * b.up;<br>    ll g = <span class="hljs-built_in">gcd</span>(tmp1, tmp2);<br>    tmp1 /= g, tmp2 /= g;<br>    <span class="hljs-keyword">return</span> frac&#123;tmp2, tmp1&#125;;<br>&#125;<br><br><span class="hljs-function">frac <span class="hljs-title">div</span><span class="hljs-params">(frac a, frac b)</span> </span>&#123;<br>    ll tmp1 = a.down * b.up, tmp2 = a.up * b.down;<br>    ll g = <span class="hljs-built_in">gcd</span>(tmp1, tmp2);<br>    tmp1 /= g, tmp2 /= g;<br>    <span class="hljs-keyword">return</span> frac&#123;tmp2, tmp1&#125;;<br>&#125;<br><span class="hljs-comment">//----------fraction end----------//</span><br><br><br><span class="hljs-comment">//----------Guass Elimination start----------//</span><br>frac A[maxn][maxn];<br>ll exc = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Guass</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        <span class="hljs-comment">//find largest pivot</span><br>        ll maxx = i;<br>        <span class="hljs-built_in">rep</span>(j, i + <span class="hljs-number">1</span>, n) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(A[j][i].up * A[maxx][i].down) &gt; <span class="hljs-built_in">abs</span>(A[maxx][i].up * A[j][i].down)) &#123;<br>                maxx = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//row exhange</span><br>        <span class="hljs-keyword">if</span>(maxx != i) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Switch the &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;-th row with the &quot;</span> &lt;&lt; maxx &lt;&lt; <span class="hljs-string">&quot;-th row&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) &#123;<br>                <span class="hljs-built_in">swap</span>(A[i][j], A[maxx][j]);<br>            &#125;<br>            exc++;<br>            <span class="hljs-built_in">rep</span>(o, <span class="hljs-number">1</span>, n) &#123;<br>                <span class="hljs-built_in">rep</span>(p, <span class="hljs-number">1</span>, n) &#123;<br>                    cout &lt;&lt; A[o][p].up;<br>                    <span class="hljs-keyword">if</span>(A[o][p].down != <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; A[o][p].down;<br>                    cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                cout &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//Guass eliminated to upper triangular matrix</span><br>        <span class="hljs-built_in">rep</span>(j, i + <span class="hljs-number">1</span>, n) &#123;<br>            frac tmp = <span class="hljs-built_in">div</span>(A[j][i] ,A[i][i]);<br>            cout &lt;&lt; <span class="hljs-string">&quot;Subtract the &quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;-th row with &quot;</span> &lt;&lt; tmp.up &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; tmp.down &lt;&lt; <span class="hljs-string">&quot; times of the &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;-th row.&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-built_in">rep</span>(k, i , n) &#123;<br>                A[j][k] = <span class="hljs-built_in">subt</span>(A[j][k], <span class="hljs-built_in">mul</span>(A[i][k], tmp));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &lt; n) &#123;<br>            <span class="hljs-built_in">rep</span>(o, <span class="hljs-number">1</span>, n) &#123;<br>                <span class="hljs-built_in">rep</span>(p, <span class="hljs-number">1</span>, n) &#123;<br>                    cout &lt;&lt; A[o][p].up;<br>                    <span class="hljs-keyword">if</span>(A[o][p].down != <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; A[o][p].down;<br>                    cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                cout &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//output the determianat of the martix</span><br>    frac ans = frac&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        ans = <span class="hljs-built_in">mul</span>(ans, A[i][i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The determinant of the matrix is:\n&quot;</span>);<br>    <span class="hljs-keyword">if</span>(exc % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &amp;&amp; ans.up != <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    cout &lt;&lt; ans.up;<br>    <span class="hljs-keyword">if</span>(ans.down != <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; ans.down &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//----------Guass Elimination end----------//</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inp</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input the matrix(integer or fraction)\n&quot;</span>);<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) &#123;<br>            <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>            string s;<br>            cin &gt;&gt; s;<br>            ll num = <span class="hljs-number">0</span>, w = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">rep</span>(k, <span class="hljs-number">0</span>, s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span>(s[k] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    A[i][j].up = w * num;<br>                    w = <span class="hljs-number">1</span>, num = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(s[k] == <span class="hljs-string">&#x27;-&#x27;</span>) w = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span>(s[k] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[k] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) num = num * <span class="hljs-number">10</span> + s[k] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag) A[i][j].down = w * num;<br>            <span class="hljs-keyword">else</span> &#123;<br>                A[i][j].up = w * num;<br>                A[i][j].down = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input the matrix size(n*n)\n&quot;</span>);<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">inp</span>();<br>    <span class="hljs-built_in">Guass</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>行列式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拉格朗日插值法</title>
    <link href="/2021/10/21/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E6%B3%95/"/>
    <url>/2021/10/21/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="中国剩余定理和lagrange插值法">中国剩余定理和Lagrange插值法</h1><h2 id="引言">引言</h2><p>很巧，高代课讲到了Lagrange插值法，凭着“上课听不明白只好下课自己搞”的意志，我学学证明顺带来写个板子。</p><h2 id="前置知识中国剩余定理crt">前置知识：中国剩余定理（CRT）</h2><p>中国剩余定理是用来求解形如 <span class="math display">\[\begin{cases}x &amp; \equiv  a_1 (mod \quad m_1) \\x &amp; \equiv  a_2 (mod \quad m_2) \\&amp;...... \\x &amp; \equiv  a_k (mod \quad m_k)\end{cases}\]</span> 的线性同余方程组的解的。其中，<span class="math inline">\(\forall i\neq j \quad (a_i, a_j)=1\)</span>，我们需要找出最小的非负整数解<span class="math inline">\(x\)</span>。</p><h3 id="解法">解法</h3><p>设<span class="math inline">\(M=\prod_{i=0}^k m_i\)</span>,<span class="math inline">\(M_i=\frac{M}{m_i}\)</span>,<span class="math inline">\(M_iT_i \equiv 1(mod \ m_i)\)</span>，其中<span class="math inline">\(1\leq i,j \leq n\)</span>。</p><p>故可以构造一个解<span class="math inline">\(x=\sum_{i=1}^na_iM_it_i\)</span></p><p>由此，可以求出任意解<span class="math inline">\(x_0=x+k*M\)</span></p><p><strong>最小正整数解<span class="math inline">\(X\)</span></strong>即为<span class="math inline">\(x_0\%M\)</span></p><h3 id="证明">证明</h3><p>显然，在第<span class="math inline">\(i\)</span>个同余方程里，<span class="math inline">\(a_jM_jt_j \equiv 0(mod \ m_i)\)</span></p><p><span class="math inline">\(a_iM_it_i \equiv a_i(mod \ m_i)\)</span></p><p>所以<span class="math inline">\(\forall i,X \equiv a_i (mod \ m_i)\)</span>，满足题意。</p><h3 id="乘法逆元">乘法逆元</h3><p>若<span class="math inline">\(a*a^{-1} \equiv 1 (mod \ p)\)</span>，则称<span class="math inline">\(a^{-1}\)</span>是<span class="math inline">\(a\)</span>在<span class="math inline">\(mod \ p\)</span>意义下的逆元。</p><p>用扩展欧几里得<span class="math inline">\((exgcd)\)</span>来求解</p><p>过程如下：</p><p><span class="math display">\[因为a*x+b*y=(a, b)\\且b*x&#39;+(a\%b)*y&#39;=(b,a\%b)\\a\%b=a-\lfloor\frac{a}{b}\rfloor*b\]</span></p><p><span class="math display">\[有a*y&#39;+b*(x&#39;-\lfloor\frac{a}{b}\rfloor*y&#39;)=(a,b)\\故x=y&#39;,y=(x&#39;-\lfloor\frac{a}{b}\rfloor*y&#39;)\]</span></p><p>显然，<span class="math inline">\((M_i, m_i)=1\)</span>，故令<span class="math inline">\(a=M_i, b=m_i\)</span>，则<span class="math inline">\(M_ix+m_iy=1\)</span>，故<span class="math inline">\(M_ix=1-m_iy\)</span>，可得<span class="math inline">\(x\)</span>为<span class="math inline">\(M_i\)</span>在<span class="math inline">\(mod\ m_i\)</span>下的逆元，即为题设所求。</p><h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">ll n, a[maxn], m[maxn], Mi[maxn], M = <span class="hljs-number">1</span>, X;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) &#123;x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-built_in">exgcd</span>(b, a % b, x, y);<br>    ll z = x;<br>    x = y, y = z - y * (a / b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CRT</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        m[i] = <span class="hljs-built_in">read</span>(), a[i] = <span class="hljs-built_in">read</span>();<br>        M *= m[i];<br>    &#125;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        Mi[i] = M / m[i];<br>        ll x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">exgcd</span>(Mi[i], m[i], x, y);<br>        X += a[i] * Mi[i] * (x &lt; <span class="hljs-number">0</span> ? (x + m[i]):x);<br>    &#125;<br>    cout &lt;&lt; X % M &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="正片lagrange插值">正片：Lagrange插值</h2><h3 id="多项式储备知识多项式余数">多项式储备知识（多项式余数）</h3><p>已知多项式 <span class="math display">\[f(x)\in P[x],f(x)=\sum_{i=0}^{n}a_ix^i\]</span></p><p><span class="math display">\[故f(x)\%(x-\alpha)=\sum_{i=0}^{n}a_i\alpha^i\]</span></p><p>下证：</p><p>已知 <span class="math display">\[f(x)=\sum_{i=0}^{n}a_ix^i \\f(x)=\sum_{i=0}^{n}a_ix^i=\sum_{i=0}^{n}(x-\alpha+\alpha)^i=\sum_{i=0}^{n}a_i\sum_{j=0}^{i}{i \choose j}(x-\alpha)^j\alpha^{i-j}\]</span></p><p>可知，当<span class="math inline">\(j\neq0\)</span>时，该子项<span class="math inline">\(p\%(x-\alpha)=0\)</span>恒成立 故余数必为<span class="math inline">\(j=0\)</span>的项之和，即 <span class="math display">\[\begin{aligned}r(x)=\sum_{i=0}^{n}a_i\alpha^i\end{aligned}\]</span></p><h3 id="模意义下的推导过程">模意义下的推导过程</h3><p>由上述可以得到一个关于<span class="math inline">\(f(x)\)</span>的同余方程组，即 <span class="math display">\[\begin{cases}f(x) &amp; \equiv  y_1 (mod \ (x-x_1)) \\f(x) &amp; \equiv  y_2 (mod \ (x-x_2)) \\&amp;...... \\f(x) &amp; \equiv  y_n (mod \ (x-x_n))\end{cases}\]</span> 根据<strong>中国剩余定理</strong> <span class="math display">\[\begin{aligned}M=\prod_{i=1}^{n}(x-x_i),M_i=\frac{M}{x-x_i}=\prod_{j\neq i}(x-x_j)\end{aligned}\]</span> 得<span class="math inline">\(M_i\)</span>在<span class="math inline">\(mod(x-x_i)\)</span>意义下的逆元<span class="math inline">\(T_i\)</span>为 <span class="math display">\[\begin{aligned}M_i^{-1}=T_i=\prod_{j\neq i}\frac{1}{x_i-x_j}\end{aligned}\]</span> 故有 <span class="math display">\[\begin{aligned}f(x) \equiv \sum_{i=1}^{n}y_iM_iT_i\equiv \sum_{i=1}^{n}y_i\prod_{j\neq i}M_iT_i\equiv \sum_{i=1}^{n}y_i\prod_{j\neq i}\frac{x-x_i}{x_i-x_j} \quad mod(M)\end{aligned}\]</span></p><p>又<span class="math inline">\(f(x)\)</span>唯一，故 <span class="math display">\[\begin{aligned}f(x) = \sum_{i=1}^{n}y_i\prod_{j\neq i}\frac{x-x_i}{x_i-x_j}\end{aligned}\]</span> 即为Lagrange插值的表达式</p><h3 id="通常意义下的推导过程">通常意义下的推导过程</h3><p>已知<span class="math inline">\(f(x)\)</span>过<span class="math inline">\(n\)</span>个点<span class="math inline">\(P_1(x_1,y_1),P_2(x_2,y_2),...,P_n(x_n,y_n)\)</span>，以及其在<span class="math inline">\(x\)</span>轴上的投影<span class="math inline">\(P_i^{&#39;}(x_i,0)\)</span></p><p>考虑构造<span class="math inline">\(n\)</span>个函数<span class="math inline">\(F_i(x)\)</span>使得其过点， <span class="math display">\[\left\{\begin{aligned}&amp; P_j^{&#39;} \quad j\neq i \\&amp; P_i \quad j=i \end{aligned}\right.\]</span> 则可知所需函数<span class="math inline">\(f(x)=\sum_{i=1}^{n}F_i(x)\)</span>.</p><p>则可设<span class="math inline">\(F_i(x)=a\prod_{j\neq i}(x_i-x_j)\)</span>，将<span class="math inline">\(P_i\)</span>代入可得<span class="math inline">\(a=\frac{y_i}{\prod_{j\neq i}(x_i-x_j)}\)</span>，所以 <span class="math display">\[\begin{aligned}F_i(x)=y_i\prod_{j\neq i}\frac{x-x_j}{x_i-x_j}\end{aligned}\]</span> 由此导出<strong>Lagrange插值在通常意义下的公式</strong>，如下 <span class="math display">\[\begin{aligned}f(x)=\sum_{i=1}^{n}F_i(x)=\sum_{i=1}^{n}y_i\prod_{j\neq i}\frac{x-x_j}{x_i-x_j}\end{aligned}\]</span> 与上述<strong>在模意义下的Lagrange插值公式</strong>相同</p><h2 id="代码实现对xk时即需要求fk的值的代码">代码实现（对<span class="math inline">\(x=k\)</span>时，即需要求<span class="math inline">\(f(k)\)</span>的值的代码）</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> ll p = <span class="hljs-number">998244353</span>;<br>ll n, y[maxn], x[maxn], k;<br>ll ans, s1, s2;<br><br><span class="hljs-function">ll <span class="hljs-title">fastmod</span><span class="hljs-params">(ll a, ll k)</span> </span>&#123;<br>    ll base = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(k) &#123;<br>        <span class="hljs-keyword">if</span>(k &amp; <span class="hljs-number">1</span>) base = base * a % p;<br>        a = a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> base % p;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fastmod</span>(x, p - <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Lagrange</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        x[i] = <span class="hljs-built_in">read</span>(), y[i] = <span class="hljs-built_in">read</span>();<br>    &#125;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) &#123;<br>        s1 = y[i] % p;<br>        s2 = <span class="hljs-number">1LL</span>;<br>        <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) &#123;<br>            <span class="hljs-keyword">if</span>(i != j) &#123;<br>                s1 = s1 * (k - x[j]) % p;<br>                s2 = s2 * (x[i]-x[j]) % p;<br>            &#125;<br>        &#125;<br>        ans += s1 * <span class="hljs-built_in">inv</span>(s2) % p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (ans % p + p) % p);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多项式</tag>
      
      <tag>数论</tag>
      
      <tag>扩展欧几里得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伯努利数</title>
    <link href="/2021/10/17/%E4%BC%AF%E5%8A%AA%E5%88%A9%E6%95%B0/"/>
    <url>/2021/10/17/%E4%BC%AF%E5%8A%AA%E5%88%A9%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="伯努利数">伯努利数</h1><p>今天看吉米多维奇的时候偶然看到伯努利数，一查oi-wiki上也有，就学了一下，就当第一篇博客了。（之后会写FFT和NTT，多项式求逆和多项式除法的）</p><h2 id="背景等幂求和">背景：等幂求和</h2><p><span class="math display">\[\begin{aligned}\sum_{k=0}^{n-1}k^m=\frac{1}{m+1}\sum_{k=0}^mC_{m+1}^kB_kn^{m+1-k}\end{aligned}\]</span></p><p>利用<span class="math inline">\((k+1)^2-k^2=2k+1\)</span>可得 <span class="math display">\[\begin{aligned}\sum_{k=1}^n[(k+1)^2-k^2]=\sum_{k=1}^n(2k+1)\end{aligned}\]</span> 整理后即为 <span class="math display">\[\begin{aligned}\sum_{k=1}^nk=\frac{n(n+1)}{2}\end{aligned}\]</span> 类似的，利用<span class="math inline">\((k+1)^3-k^3=3k^2+3k+1\)</span>可得 <span class="math display">\[\begin{aligned}\sum_{k=1}^n[(k+1)^3-k^3]=\sum_{k=1}^n(3k^2+3k+1)=3\sum_{k=1}^nk^2+3\sum_{k=1}^nk+n\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}=3\sum_{k=1}^nk^2+\frac{3n(n+1)}{2}+n\end{aligned}\]</span></p><p>整理后即为 <span class="math display">\[\begin{aligned}\sum_{k=1}^nk^2=\frac{n(n+1)(2n+1)}{6}\end{aligned}\]</span> 继续下去可得 <span class="math display">\[\begin{aligned}\sum_{k=1}^nk^3=[\frac{n(n+1)}{2}]^2\end{aligned}\]</span> 由此，伯努利得到了<span class="math inline">\(\sum_{k=0}^{n-1}k^m\)</span>的通项，如上文。</p><h2 id="一个优美的性质">一个优美的性质</h2><p>令公式中的<span class="math inline">\(n=1\)</span>可得 <span class="math display">\[\begin{aligned}0=\frac{1}{m+1}\sum_{k=0}^mC_{m+1}^kB_k\end{aligned}\]</span> 即 <span class="math display">\[\begin{aligned}\sum_{k=0}^mC_{m+1}^kB_k=0\end{aligned}\]</span></p><h2 id="证明咕咕咕">证明（咕咕咕）</h2><h3 id="方法1归纳法">方法1：归纳法</h3><h3 id="方法2生成函数">方法2：生成函数</h3>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组合数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
